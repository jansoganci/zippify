import { makeCompletion, backendApi, getEnv } from './apiClient.js';
import { markdownToJson } from './markdownToJson.js';

/**
 * System prompt for creating an Etsy listing.
 * This prompt instructs DeepSeek AI to generate an Etsy listing.
 * Output format: a JSON object containing title, description, tags, and altTexts fields.
 */
const SYSTEM_PROMPT = `You are an AI engine for generating high-performing Etsy listings based on a specific set of rules. Do not explain your reasoning. Only return the structured listing content as instructed below.

Follow the instructions strictly for each section:

---

**[1. Title]**
- Maximum 60 characters.
- Start with 1–2 most relevant keywords (front-load).
- Must be natural, readable, and not a keyword dump.
- Format: "[Keyword 1] [Keyword 2] - [Feature/Benefit] - [Optional Detail]"

---

**[2. Description]**
- First sentence must repeat primary keywords naturally.
- Use friendly, conversational tone.
- Include size, usage, care instructions where applicable.
- Format: short paragraphs and/or bullet points.
- Include this digital product disclaimer:
  > "Note: This is a digital download (PDF). No physical item will be shipped."
- Optional: story behind product and call-to-action.

---

**[3. Tags]**
- Generate 13 tags.
- Each tag must have **2+ words** and be under **21 characters**.
- Focus on buyer language, usage context, and product features.
- Do not use "instant download" or "crochet pattern" as tags.
- No single word should appear more than 7 times across all tags.

---

**[4. Alt Text for Images]**
- Generate 10 alt texts.
- Each alt text max 125 characters.
- Describe exactly what's in the image + how it relates to product.
- Use keywords naturally.
- All alt texts must be unique.

---

Return output in the following format (JSON-like):

\`\`\`
{
  "title": "...",
  "description": "...",
  "tags": ["...", "...", "..."],
  "altTexts": ["...", "...", "..."]
}
\`\`\`
Do not add any extra commentary. Only return the output in above format.`;

/**
 * Parses the listing generated by the AI and returns a structured object.
 * @param {Object|string} listing - Raw listing response from the AI
 * @returns {Object} - Parsed listing object
 */
const parseListing = (listing) => {
  logger.info(`🔍 [parseListing] Listing parse is starting...`);
  logger.info(`🔍 [parseListing] Listing type: ${typeof listing}`);
  
  try {
    // If listing is already an object
    if (typeof listing === 'object' && listing !== null) {
      logger.info(`🔍 [parseListing] Listing is already an object, processing directly...`);
      const { title, description, tags } = listing;
      
      if (title && description && Array.isArray(tags)) {
        logger.info(`✅ [parseListing] Object format is valid, adding metadata...`);
        return {
          ...listing,
          metadata: {
            timestamp: new Date().toISOString(),
            step: 'etsy_listing'
          }
        };
      } else {
        logger.warn(`⚠️ [parseListing] Object format is invalid! Missing fields.`);
      }
    }

    // If listing is a string
    if (typeof listing === 'string') {
      logger.info(`🔍 [parseListing] Listing is a string, processing...`);
      logger.info(`🔍 [parseListing] String length: ${listing.length} characters`);
      
      // Clean up Markdown code block
      let cleanedListing = listing.trim();
      
      // Remove Markdown code block markers (```json and ```)
      if (cleanedListing.startsWith('```')) {
        logger.info(`🔍 [parseListing] Markdown code block detected, cleaning...`);
        // Remove the first line (```json or just ```)
        cleanedListing = cleanedListing.substring(cleanedListing.indexOf('\n') + 1);
        
        // Remove the last line (```)
        if (cleanedListing.endsWith('```')) {
          cleanedListing = cleanedListing.substring(0, cleanedListing.lastIndexOf('```')).trim();
        }
        logger.info(`🔍 [parseListing] Code block cleaned, parsing JSON...`);
      }
      
      // Try standard JSON format first
      try {
        const jsonObject = JSON.parse(cleanedListing);
        logger.info(`✅ [parseListing] JSON parsed successfully:`);
        
        // Validate fields and merge with defaults
        const result = {
          title: jsonObject.title || '',
          description: jsonObject.description || '',
          tags: Array.isArray(jsonObject.tags) ? jsonObject.tags : [],
          altTexts: Array.isArray(jsonObject.altTexts) ? jsonObject.altTexts : [],
          metadata: {
            timestamp: new Date().toISOString(),
            step: 'etsy_listing'
          }
        };
        
        logger.info(`   - Title: ${result.title || 'Not found'}`);
        logger.info(`   - Description: ${result.description ? `Found (${result.description.length} characters)` : 'Not found'}`);
        logger.info(`   - Tags: ${result.tags.length} items`);
        logger.info(`   - Alt texts: ${result.altTexts.length} items`);
        
        return result;
      } catch (jsonError) {
        logger.warn(`⚠️ [parseListing] JSON parse error, trying alternative format: ${jsonError.message}`);
        
        // If JSON fails, try legacy format
        const result = {
          title: '',
          description: '',
          tags: [],
          altTexts: [],
          metadata: {
            timestamp: new Date().toISOString(),
            step: 'etsy_listing'
          }
        };

        // Split into sections and process each
        const sections = listing.split('\n\n');
        logger.info(`🔍 [parseListing] ${sections.length} sections found`);
        
        sections.forEach((section, index) => {
          logger.info(`🔍 [parseListing] Section ${index + 1} processing (${section.length} characters)...`);
          
          if (section.startsWith('Title:')) {
            result.title = section.replace('Title:', '').trim();
            logger.info(`🔍 [parseListing] Title found: "${result.title}"`);
          } else if (section.startsWith('Description:')) {
            result.description = section.replace('Description:', '').trim();
            logger.info(`🔍 [parseListing] Description found (${result.description.length} characters)`);
          } else if (section.startsWith('Tags:')) {
            // Convert comma-separated tags to array
            result.tags = section.replace('Tags:', '').split(',').map(tag => tag.trim()).filter(tag => tag.length > 0);
            logger.info(`🔍 [parseListing] Tags found: ${result.tags.length}`);
            logger.info(`   - Tags: ${result.tags.join(', ')}`);
          } else if (section.startsWith('AltTexts:')) {
            // Convert alt texts to array line by line
            result.altTexts = section.replace('AltTexts:', '').split('\n').map(t => t.trim()).filter(t => t);
            logger.info(`🔍 [parseListing] Alt texts found: ${result.altTexts.length}`);
          } else {
            logger.warn(`⚠️ [parseListing] Unrecognized section: ${section.substring(0, 30)}...`);
          }
        });

        logger.info(`✅ [parseListing] Parsing completed:`);
        logger.info(`   - Title: ${result.title || 'Not found'}`);
        logger.info(`   - Description: ${result.description ? `Found (${result.description.length} characters)` : 'Not found'}`);
        logger.info(`   - Tags: ${result.tags.length} items`);
        logger.info(`   - Alt texts: ${result.altTexts.length} items`);
        
        return result;
      }
    }

    logger.error('❌ [parseListing] Invalid listing format!');
    throw new Error('Invalid listing format');
  } catch (error) {
    logger.error('❌ [parseListing] Listing Parse Error:', error.message);
    logger.error('❌ [parseListing] Error details:', error.stack);
    return {
      error: 'Failed to parse listing',
      raw: listing
    };
  }
};

/**
 * Generates an Etsy listing based on pattern content.
 * @param {Object} input - Pattern content and other inputs
 * @param {Object} options - Optional parameters
 * @returns {Object} - Generated Etsy listing or error object
 */
export const generateEtsyListing = async (input, options = {}) => {
  try {
    logger.info('🧶 [generateEtsyListing] Starting generation...');
    logger.info('🧶 [generateEtsyListing] Input type:', input?.optimizedPattern ? 'optimizedPattern' : input?.pdfContent ? 'pdfContent' : 'unknown');
    
    // Check for pattern content
    const pattern = input?.optimizedPattern || input?.pdfContent;
    if (!pattern) {
      logger.error('❌ [generateEtsyListing] Pattern content not found!');
      throw new Error('Pattern content is required');
    }
    logger.info('🧶 [generateEtsyListing] Pattern length:', pattern.length, 'characters');
    logger.info('🧶 [generateEtsyListing] Pattern sample (first 100 characters):', pattern.substring(0, 100) + '...');
    
    // Convert Markdown to JSON
    logger.info('🧶 [generateEtsyListing] Markdown to JSON conversion starting...');
    const structuredPattern = markdownToJson(pattern);
    
    if (!structuredPattern) {
      logger.error('❌ [generateEtsyListing] Markdown to JSON conversion failed!');
      throw new Error('Failed to parse markdown content');
    }
    
    logger.info('🧶 [generateEtsyListing] Markdown to JSON conversion successful:');
    logger.info(JSON.stringify(structuredPattern, null, 2));
    
    // Build user prompt using JSON structure
    logger.info('🧶 [generateEtsyListing] Creating user prompt...');
    const userPrompt = `Create an Etsy listing for this knitting pattern:

Title: ${options.title || structuredPattern.title || 'Knitting Pattern'}

Pattern Information:
${JSON.stringify(structuredPattern, null, 2)}

Additional Tags: ${options.tags?.join(', ') || ''}`;
    
    logger.info('🧶 [generateEtsyListing] User prompt created (length:', userPrompt.length, 'characters)');

    let listing;
    try {
      // First try backend API
      const requestId = `etsy-${Date.now()}`;
      logger.info(`🧶 [generateEtsyListing] [${requestId}] Preparing backend API request...`);
      
      const data = {
        model: getEnv('DEEPSEEK_MODEL', 'deepseek-chat'),
        messages: [
          { role: 'system', content: SYSTEM_PROMPT },
          { role: 'user', content: userPrompt }
        ],
        max_tokens: parseInt(getEnv('DEEPSEEK_MAX_TOKENS', '4096'), 10)
      };
      
      logger.info(`🧶 [generateEtsyListing] [${requestId}] DeepSeek API configuration:`);
      logger.info(`   - Model: ${data.model}`);
      logger.info(`   - Max Tokens: ${data.max_tokens}`);
      logger.info(`   - System Prompt Length: ${SYSTEM_PROMPT.length} characters`);
      logger.info(`   - User Prompt Length: ${userPrompt.length} characters`);

      // Send request via backend proxy
      logger.info(`🧶 [generateEtsyListing] [${requestId}] Sending request to backend API...`);
      logger.info(`🧶 [generateEtsyListing] [${requestId}] Endpoint: /api/deepseek`);
      
      // Get JWT token from localStorage
      const token = localStorage.getItem('zippify_token');
      
      const backendResponse = await backendApi.post('/api/deepseek', { ...data, featureKey: "create-listing" }, {
        headers: {
          'Content-Type': 'application/json',
          'X-Request-ID': requestId,
          'Authorization': token ? `Bearer ${token}` : ''
        },
        timeout: 180000 // 3 minutes
      });
      
      logger.info(`🧶 [generateEtsyListing] [${requestId}] Backend API response received:`);
      logger.info(`   - Status: ${backendResponse.status}`);
      logger.info(`   - Status Text: ${backendResponse.statusText}`);
      
      if (backendResponse.data?.choices?.[0]?.message?.content) {
        listing = backendResponse.data.choices[0].message.content;
        logger.info(`✅ [generateEtsyListing] [${requestId}] Listing successfully received from backend API (length: ${listing.length} characters)`);
        logger.info(`🧶 [generateEtsyListing] [${requestId}] Listing sample (first 200 characters):`);
        logger.info(listing.substring(0, 200) + '...');
      } else {
        logger.error(`❌ [generateEtsyListing] [${requestId}] Invalid response received from backend API:`, backendResponse.data);
        throw new Error('Invalid response from backend API');
      }
    } catch (backendError) {
      logger.warn(`⚠️ [generateEtsyListing] Backend API error:`, backendError.message);
      logger.warn(`⚠️ [generateEtsyListing] Switching to direct API call...`);
      try {
        listing = await makeCompletion(SYSTEM_PROMPT, userPrompt);
        logger.info(`✅ [generateEtsyListing] Direct API call successful (length: ${listing.length} characters)`);
      } catch (directApiError) {
        logger.error(`❌ [generateEtsyListing] Direct API call also failed:`, directApiError.message);
        throw directApiError;
      }
    }

    logger.info(`🧶 [generateEtsyListing] Listing is being parsed...`);
    const parsedListing = parseListing(listing);
    
    logger.info(`✅ [generateEtsyListing] Listing successfully parsed:`);
    logger.info(`   - Title: ${parsedListing.title}`);
    logger.info(`   - Description length: ${parsedListing.description?.length || 0} characters`);
    logger.info(`   - Number of tags: ${parsedListing.tags?.length || 0}`);
    logger.info(`   - Number of alt texts: ${parsedListing.altTexts?.length || 0}`);
    
    return {
      success: true,
      ...parsedListing
    };
  } catch (error) {
    logger.error('❌ [generateEtsyListing] Etsy Listing Generation Error:', error.message);
    logger.error('❌ [generateEtsyListing] Error details:', error.stack);
    return {
      success: false,
      title: options?.title || 'Error',
      description: 'An error occurred while generating the listing.',
      tags: [],
      altTexts: [],
      error: error.message
    };
  }
};