name: Deploy to Hetzner

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # 2. Copy environment files
      - name: Copy .env to Server
        run: |
          echo "📁 Copying .env file to server..."
          echo "${{ secrets.ENV_FILE }}" | sed 's/\\n/\n/g' | ssh -o StrictHostKeyChecking=no root@64.23.195.7 "cat > /root/zippify/backend/.env"
          echo "✅ .env file copied"

      - name: Copy .env.production to Server
        run: |
          echo "📁 Copying .env.production file to server..."
          echo "${{ secrets.ENV_PRODUCTION_FILE }}" | sed 's/\\n/\n/g' | ssh -o StrictHostKeyChecking=no root@64.23.195.7 "cat > /root/zippify/backend/.env.production"
          echo "✅ .env.production file copied"

      # 3. Verify environment files
      - name: Verify Environment Files
        run: |
          ssh -o StrictHostKeyChecking=no root@64.23.195.7 << 'EOF'
            set -e
            echo "🔍 Verifying environment files..."
            
            cd /root/zippify/backend
            
            if [ -f ".env" ]; then
              echo "✅ .env file exists"
              echo "📄 .env file size: $(wc -c < .env) bytes"
            else
              echo "❌ .env file missing!"
              exit 1
            fi
            
            if [ -f ".env.production" ]; then
              echo "✅ .env.production file exists"
              echo "📄 .env.production file size: $(wc -c < .env.production) bytes"
            else
              echo "❌ .env.production file missing!"
              exit 1
            fi
            
            echo "✅ Environment files verified"
          EOF

      # 4. PULL NEW CODE FIRST
      - name: Pull Latest Code
        run: |
          ssh -o StrictHostKeyChecking=no root@64.23.195.7 << 'EOF'
            set -e
            echo "📥 Pulling latest code"
            cd /root/zippify
            git fetch origin
            git reset --hard origin/master
            echo "✅ Code updated"
          EOF

      # 5. PRE-DEPLOYMENT: Database Backup (after pulling new code)
      - name: Backup Database
        run: |
          ssh -o StrictHostKeyChecking=no root@64.23.195.7 << 'EOF'
            set -e
            echo "📁 Creating database backup before deployment..."
            
            cd /root/zippify
            
            # Create backup using the existing backup script (now with updated package.json)
            npm run backup-db
            
            # Also create a pre-deployment backup with timestamp  
            BACKUP_TIMESTAMP=$(date +%Y%m%d_%H%M%S)
            mkdir -p backups
            cp -f backend/db/zippify.db "backups/pre_deploy_backup_${BACKUP_TIMESTAMP}.db" || true
            
            echo "✅ Database backup completed"
          EOF

      # 6. DEPLOYMENT: Build Frontend
      - name: Deploy and Build Frontend
        run: |
          ssh -o StrictHostKeyChecking=no root@64.23.195.7 << 'EOF'
            set -e

            DEPLOY_LOG="/root/zippify/deploy_$(date +%Y%m%d_%H%M%S).log"
            exec > >(tee -a "$DEPLOY_LOG") 2>&1

            echo "📝 Logging deployment to: $DEPLOY_LOG"
            echo "⏱️ Deployment started at $(date)"

            cd /root/zippify

            echo "📦 Installing frontend dependencies"
            npm install

            echo "🏗️ Building frontend"
            npm run build

            echo "🧹 Cleaning /var/www/zippify"
            rm -rf /var/www/zippify/*
            cp -r dist/* /var/www/zippify/

            echo "✅ Frontend deployment completed"
          EOF

      # 7. BACKEND: Install dependencies
      - name: Install Backend Dependencies
        run: |
          ssh -o StrictHostKeyChecking=no root@64.23.195.7 << 'EOF'
            set -e
            echo "📦 Installing backend dependencies"
            cd /root/zippify/backend
            npm install
            echo "✅ Backend dependencies installed"
          EOF

      # 8. BACKEND: Graceful shutdown
      - name: Stop Backend Service Gracefully
        run: |
          ssh -o StrictHostKeyChecking=no root@64.23.195.7 << 'EOF'
            set -e
            echo "🛑 Stopping backend service gracefully"
            
            # Try graceful PM2 stop first
            pm2 stop zippify-backend || echo "⚠️ PM2 process not running"
            
            # Wait a bit for graceful shutdown
            sleep 2
            
            # Force kill if still running
            PORT_PID=$(lsof -t -i:3001 || echo "")
            if [ ! -z "$PORT_PID" ]; then
              echo "🔨 Force killing process on port 3001"
              kill -9 $PORT_PID || true
            fi
            
            # Clean up PM2 process
            pm2 delete zippify-backend || true
            
            echo "✅ Backend stopped"
          EOF

      # 9. DATABASE: Run migrations if needed
      - name: Run Database Migrations
        run: |
          ssh -o StrictHostKeyChecking=no root@64.23.195.7 << 'EOF'
            set -e
            echo "🔄 Checking for database migrations"
            
            cd /root/zippify/backend
            
            # Check if there are any migration scripts
            if [ -d "migrations" ] && [ "$(ls -A migrations)" ]; then
              echo "📋 Running database migrations"
              NODE_ENV=production node migrations/runMigrations.js || echo "⚠️ Migration script not found or failed"
            else
              echo "ℹ️ No migrations to run"
            fi
            
            echo "✅ Database migration check completed"
          EOF

      # 10. BACKEND: Start new service
      - name: Start New Backend Service
        run: |
          ssh -o StrictHostKeyChecking=no root@64.23.195.7 << 'EOF'
            set -e
            echo "🚀 Starting new backend service"
            
            cd /root/zippify/backend
            
            # Start with production environment
            NODE_ENV=production pm2 start server.js --name zippify-backend --update-env
            
            echo "✅ Backend service started"
          EOF

      # 11. NGINX: Restart web server
      - name: Restart Nginx
        run: |
          ssh -o StrictHostKeyChecking=no root@64.23.195.7 << 'EOF'
            set -e
            echo "🔁 Restarting Nginx"
            systemctl restart nginx
            echo "✅ Nginx restarted"
          EOF

      # 12. HEALTH CHECKS: Verify deployment
      - name: Comprehensive Health Check
        run: |
          ssh -o StrictHostKeyChecking=no root@64.23.195.7 << 'EOF'
            set -e
            echo "🏥 Starting comprehensive health checks"
            
            # Wait for services to stabilize
            echo "⏳ Waiting 10 seconds for services to stabilize..."
            sleep 10
            
            # Check PM2 status
            echo "📊 PM2 Status:"
            pm2 status zippify-backend
            
            # Check backend health endpoint with more tolerant checks
            echo "🔍 Testing backend health endpoint at localhost:3001/api/health"
            HEALTH_CHECK_PASSED=false
            
            for i in {1..15}; do
              echo "🔍 Health check attempt $i/15..."
              
              # Try different approaches to test the endpoint
              if curl -s --connect-timeout 5 --max-time 10 http://localhost:3001/api/health > /tmp/health_response.json 2>/dev/null; then
                echo "✅ Got response from health endpoint"
                cat /tmp/health_response.json
                
                # Check if response contains OK or status
                if grep -q -E "(OK|status|running)" /tmp/health_response.json; then
                  echo "✅ Backend health check passed (attempt $i)"
                  HEALTH_CHECK_PASSED=true
                  break
                else
                  echo "⚠️ Health endpoint responded but content unexpected"
                fi
              else
                echo "⏳ Backend not responding yet (attempt $i/15), waiting 5 seconds..."
                
                # Show backend logs for debugging
                if [ $i -eq 5 ] || [ $i -eq 10 ]; then
                  echo "🔍 Backend logs (last 10 lines):"
                  pm2 logs zippify-backend --lines 10 || true
                fi
                
                sleep 5
              fi
            done
            
            if [ "$HEALTH_CHECK_PASSED" = false ]; then
              echo "❌ Backend health check failed after 15 attempts"
              echo "🔍 Final backend logs:"
              pm2 logs zippify-backend --lines 30 || true
              echo "🔍 PM2 process details:"
              pm2 show zippify-backend || true
              echo "🔍 Process status:"
              ps aux | grep node || true
              echo "🔍 Port 3001 status:"
              netstat -tulpn | grep 3001 || true
              exit 1
            fi
            
            # Test frontend proxy (less critical)
            echo "🔍 Testing frontend proxy"
            if curl -s --connect-timeout 3 --max-time 8 http://localhost/api/health > /dev/null 2>&1; then
              echo "✅ Frontend proxy to backend working"
            else
              echo "⚠️ Frontend proxy might have issues (non-critical)"
            fi
            
            # Database connectivity check
            echo "🗄️ Testing database connectivity"
            cd /root/zippify/backend
            if timeout 10 node -e "
              const sqlite3 = require('sqlite3');
              const db = new sqlite3.Database('./db/zippify.db', (err) => {
                if (err) {
                  console.error('❌ Database connection failed:', err.message);
                  process.exit(1);
                } else {
                  console.log('✅ Database connection successful');
                  db.close();
                  process.exit(0);
                }
              });
            " 2>/dev/null; then
              echo "✅ Database is accessible"
            else
              echo "⚠️ Database connection test failed (but not critical for deployment)"
            fi
            
            echo "🎉 Health checks completed! Deployment successful!"
          EOF

      # 13. POST-DEPLOYMENT: Cleanup and notifications
      - name: Post-Deployment Cleanup
        run: |
          ssh -o StrictHostKeyChecking=no root@64.23.195.7 << 'EOF'
            echo "🧹 Post-deployment cleanup"
            
            # Clean old PM2 logs
            pm2 flush
            
            # Clean old node_modules cache if needed
            # npm cache clean --force
            
            # Log deployment success
            echo "📝 Deployment completed at $(date)" >> /root/zippify/deployment.log
            
            echo "✅ Cleanup completed"
          EOF

      # 14. MONITORING: Show final status
      - name: Show Final Status
        run: |
          ssh -o StrictHostKeyChecking=no root@64.23.195.7 << 'EOF'
            echo ""
            echo "🎯 DEPLOYMENT SUMMARY"
            echo "===================="
            echo "⏰ Completed at: $(date)"
            echo ""
            echo "📊 Service Status:"
            pm2 status
            echo ""
            echo "🔗 Application URLs:"
            echo "   Frontend: http://$(curl -s ifconfig.me)"
            echo "   Backend Health: http://$(curl -s ifconfig.me)/api/health"
            echo ""
            echo "📈 Recent Logs:"
            pm2 logs zippify-backend --lines 5
          EOF