name: Deploy to Hetzner

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # 1. PRE-DEPLOYMENT: Database Backup
      - name: Backup Database
        run: |
          ssh -o StrictHostKeyChecking=no root@64.23.195.7 << 'EOF'
            set -e
            echo "üìÅ Creating database backup before deployment..."
            
            cd /root/zippify
            
            # Create backup using the existing backup script
            npm run backup-db
            
            # Also create a pre-deployment backup with timestamp
            BACKUP_TIMESTAMP=$(date +%Y%m%d_%H%M%S)
            cp -f backend/db/zippify.db "backups/pre_deploy_backup_${BACKUP_TIMESTAMP}.db" || true
            
            echo "‚úÖ Database backup completed"
          EOF

      # 2. Copy environment files
      - name: Copy .env to Server
        run: |
          echo "${{ secrets.ENV_FILE }}" | sed 's/\\n/\n/g' | ssh -o StrictHostKeyChecking=no root@64.23.195.7 "cat > /root/zippify/backend/.env"

      - name: Copy .env.production to Server
        run: |
          echo "${{ secrets.ENV_PRODUCTION_FILE }}" | sed 's/\\n/\n/g' | ssh -o StrictHostKeyChecking=no root@64.23.195.7 "cat > /root/zippify/backend/.env.production"

      # 3. DEPLOYMENT: Pull new code and build
      - name: Deploy and Build Frontend
        run: |
          ssh -o StrictHostKeyChecking=no root@64.23.195.7 << 'EOF'
            set -e

            DEPLOY_LOG="/root/zippify/deploy_$(date +%Y%m%d_%H%M%S).log"
            exec > >(tee -a "$DEPLOY_LOG") 2>&1

            echo "üìù Logging deployment to: $DEPLOY_LOG"
            echo "‚è±Ô∏è Deployment started at $(date)"

            cd /root/zippify

            echo "üì• Pulling latest code"
            git fetch origin
            git reset --hard origin/master

            echo "üì¶ Installing frontend dependencies"
            npm install

            echo "üèóÔ∏è Building frontend"
            npm run build

            echo "üßπ Cleaning /var/www/zippify"
            rm -rf /var/www/zippify/*
            cp -r dist/* /var/www/zippify/

            echo "‚úÖ Frontend deployment completed"
          EOF

      # 4. BACKEND: Install dependencies
      - name: Install Backend Dependencies
        run: |
          ssh -o StrictHostKeyChecking=no root@64.23.195.7 << 'EOF'
            set -e
            echo "üì¶ Installing backend dependencies"
            cd /root/zippify/backend
            npm install
            echo "‚úÖ Backend dependencies installed"
          EOF

      # 5. BACKEND: Graceful shutdown
      - name: Stop Backend Service Gracefully
        run: |
          ssh -o StrictHostKeyChecking=no root@64.23.195.7 << 'EOF'
            set -e
            echo "üõë Stopping backend service gracefully"
            
            # Try graceful PM2 stop first
            pm2 stop zippify-backend || echo "‚ö†Ô∏è PM2 process not running"
            
            # Wait a bit for graceful shutdown
            sleep 2
            
            # Force kill if still running
            PORT_PID=$(lsof -t -i:3001 || echo "")
            if [ ! -z "$PORT_PID" ]; then
              echo "üî® Force killing process on port 3001"
              kill -9 $PORT_PID || true
            fi
            
            # Clean up PM2 process
            pm2 delete zippify-backend || true
            
            echo "‚úÖ Backend stopped"
          EOF

      # 6. DATABASE: Run migrations if needed
      - name: Run Database Migrations
        run: |
          ssh -o StrictHostKeyChecking=no root@64.23.195.7 << 'EOF'
            set -e
            echo "üîÑ Checking for database migrations"
            
            cd /root/zippify/backend
            
            # Check if there are any migration scripts
            if [ -d "migrations" ] && [ "$(ls -A migrations)" ]; then
              echo "üìã Running database migrations"
              NODE_ENV=production node migrations/runMigrations.js || echo "‚ö†Ô∏è Migration script not found or failed"
            else
              echo "‚ÑπÔ∏è No migrations to run"
            fi
            
            echo "‚úÖ Database migration check completed"
          EOF

      # 7. BACKEND: Start new service
      - name: Start New Backend Service
        run: |
          ssh -o StrictHostKeyChecking=no root@64.23.195.7 << 'EOF'
            set -e
            echo "üöÄ Starting new backend service"
            
            cd /root/zippify/backend
            
            # Start with production environment
            NODE_ENV=production pm2 start server.js --name zippify-backend --update-env
            
            echo "‚úÖ Backend service started"
          EOF

      # 8. NGINX: Restart web server
      - name: Restart Nginx
        run: |
          ssh -o StrictHostKeyChecking=no root@64.23.195.7 << 'EOF'
            set -e
            echo "üîÅ Restarting Nginx"
            systemctl restart nginx
            echo "‚úÖ Nginx restarted"
          EOF

      # 9. HEALTH CHECKS: Verify deployment
      - name: Comprehensive Health Check
        run: |
          ssh -o StrictHostKeyChecking=no root@64.23.195.7 << 'EOF'
            set -e
            echo "üè• Starting comprehensive health checks"
            
            # Wait for services to stabilize
            sleep 5
            
            # Check PM2 status
            echo "üìä PM2 Status:"
            pm2 status zippify-backend
            
            # Check if backend is responding
            echo "üîç Testing backend health endpoint"
            for i in {1..10}; do
              if curl -s --max-time 5 http://localhost:3001/api/health | grep -q "ok"; then
                echo "‚úÖ Backend health check passed (attempt $i)"
                break
              else
                echo "‚è≥ Backend not ready yet (attempt $i/10), waiting..."
                sleep 3
              fi
              
              if [ $i -eq 10 ]; then
                echo "‚ùå Backend health check failed after 10 attempts"
                echo "üîç Backend logs:"
                pm2 logs zippify-backend --lines 20
                exit 1
              fi
            done
            
            # Check frontend
            echo "üîç Testing frontend"
            if curl -s --max-time 5 http://localhost/api/health | grep -q "ok"; then
              echo "‚úÖ Frontend proxy to backend working"
            else
              echo "‚ö†Ô∏è Frontend might have proxy issues"
            fi
            
            # Check database connectivity
            echo "üóÑÔ∏è Testing database connectivity"
            cd /root/zippify/backend
            if node -e "
              const sqlite3 = require('sqlite3');
              const db = new sqlite3.Database('./db/zippify.db', (err) => {
                if (err) {
                  console.error('‚ùå Database connection failed:', err.message);
                  process.exit(1);
                } else {
                  console.log('‚úÖ Database connection successful');
                  db.close();
                }
              });
            "; then
              echo "‚úÖ Database is accessible"
            else
              echo "‚ùå Database connection failed"
              exit 1
            fi
            
            echo "üéâ All health checks passed! Deployment successful!"
          EOF

      # 10. POST-DEPLOYMENT: Cleanup and notifications
      - name: Post-Deployment Cleanup
        run: |
          ssh -o StrictHostKeyChecking=no root@64.23.195.7 << 'EOF'
            echo "üßπ Post-deployment cleanup"
            
            # Clean old PM2 logs
            pm2 flush
            
            # Clean old node_modules cache if needed
            # npm cache clean --force
            
            # Log deployment success
            echo "üìù Deployment completed at $(date)" >> /root/zippify/deployment.log
            
            echo "‚úÖ Cleanup completed"
          EOF

      # 11. MONITORING: Show final status
      - name: Show Final Status
        run: |
          ssh -o StrictHostKeyChecking=no root@64.23.195.7 << 'EOF'
            echo ""
            echo "üéØ DEPLOYMENT SUMMARY"
            echo "===================="
            echo "‚è∞ Completed at: $(date)"
            echo ""
            echo "üìä Service Status:"
            pm2 status
            echo ""
            echo "üîó Application URLs:"
            echo "   Frontend: http://$(curl -s ifconfig.me)"
            echo "   Backend Health: http://$(curl -s ifconfig.me)/api/health"
            echo ""
            echo "üìà Recent Logs:"
            pm2 logs zippify-backend --lines 5
          EOF