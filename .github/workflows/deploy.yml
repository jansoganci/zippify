name: Deploy to DigitalOcean

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # DEBUG: Verify secrets are loaded
      - name: Verify Secrets
        run: |
          echo "üîç Verifying GitHub Secrets..."
          if [ -z "${{ secrets.ENV_FILE }}" ]; then
            echo "‚ùå ENV_FILE secret is empty or missing!"
            exit 1
          else
            echo "‚úÖ ENV_FILE secret loaded (length: $(echo "${{ secrets.ENV_FILE }}" | wc -c) chars)"
          fi
          
          if [ -z "${{ secrets.ENV_PRODUCTION_FILE }}" ]; then
            echo "‚ùå ENV_PRODUCTION_FILE secret is empty or missing!"
            exit 1
          else
            echo "‚úÖ ENV_PRODUCTION_FILE secret loaded (length: $(echo "${{ secrets.ENV_PRODUCTION_FILE }}" | wc -c) chars)"
          fi
          echo "‚úÖ All required secrets verified"

      # 1. FIRST: ENSURE REPOSITORY EXISTS (handle first-time deployment)
      - name: Ensure Repository Exists
        run: |
          ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_IP }} << 'EOF'
            set -e
            echo "üîç Checking if repository exists at /root/zippify..."
            
            if [ ! -d "/root/zippify" ]; then
              echo "üìÅ Repository not found! This appears to be the first deployment."
              echo "üîÑ Cloning repository for the first time..."
              
              cd /root
              git clone https://github.com/jansoganci/zippify.git
              
              echo "‚úÖ Repository cloned successfully"
            else
              echo "‚úÖ Repository already exists"
            fi
            
            # Ensure we're in the right directory and it's a git repo
            cd /root/zippify
            
            if [ ! -d ".git" ]; then
              echo "‚ùå Directory exists but is not a git repository!"
              echo "üîÑ Removing and re-cloning..."
              cd /root
              rm -rf zippify
              git clone https://github.com/jansoganci/zippify.git
              echo "‚úÖ Repository re-cloned successfully"
            fi
            
            echo "‚úÖ Repository verification completed"
          EOF

      # 2. PULL LATEST CODE (now we know the repo exists)
      - name: Pull Latest Code
        run: |
          ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_IP }} << 'EOF'
            set -e
            echo "üì• Pulling latest code"
            cd /root/zippify
            git fetch origin
            git reset --hard origin/master
            echo "‚úÖ Code updated"
          EOF

      # 2. Copy environment files (after directories exist)
      - name: Copy .env to Server
        run: |
          echo "üìÅ Copying .env file to server..."
          
          # Ensure backend directory exists
          ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_IP }} "mkdir -p /root/zippify/backend && echo '‚úÖ Backend directory ensured'"
          
          # Backup existing .env if it exists
          ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_IP }} "[ -f '/root/zippify/backend/.env' ] && cp /root/zippify/backend/.env /root/zippify/backend/.env.backup.\$(date +%Y%m%d_%H%M%S) && echo '‚úÖ Existing .env backed up' || echo '‚ÑπÔ∏è No existing .env to backup'"
          
          # Copy the secret
          echo "${{ secrets.ENV_FILE }}" | sed 's/\\n/\n/g' | ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_IP }} "cat > /root/zippify/backend/.env"
          echo "‚úÖ .env file copied successfully"

      - name: Copy .env.production to Server
        run: |
          echo "üìÅ Copying .env.production file to server..."
          
          # Ensure backend directory exists
          ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_IP }} "mkdir -p /root/zippify/backend && echo '‚úÖ Backend directory ensured'"
          
          # Backup existing .env.production if it exists
          ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_IP }} "[ -f '/root/zippify/backend/.env.production' ] && cp /root/zippify/backend/.env.production /root/zippify/backend/.env.production.backup.\$(date +%Y%m%d_%H%M%S) && echo '‚úÖ Existing .env.production backed up' || echo '‚ÑπÔ∏è No existing .env.production to backup'"
          
          # Copy the secret
          echo "${{ secrets.ENV_PRODUCTION_FILE }}" | sed 's/\\n/\n/g' | ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_IP }} "cat > /root/zippify/backend/.env.production"
          echo "‚úÖ .env.production file copied successfully"

      # 3. Verify environment files
      - name: Verify Environment Files
        run: |
          ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_IP }} << 'EOF'
            set -e
            echo "üîç Verifying environment files..."
            
            cd /root/zippify/backend
            
            if [ -f ".env" ]; then
              echo "‚úÖ .env file exists"
              echo "üìÑ .env file size: $(wc -c < .env) bytes"
            else
              echo "‚ùå .env file missing!"
              exit 1
            fi
            
            if [ -f ".env.production" ]; then
              echo "‚úÖ .env.production file exists"
              echo "üìÑ .env.production file size: $(wc -c < .env.production) bytes"
            else
              echo "‚ùå .env.production file missing!"
              exit 1
            fi
            
            echo "‚úÖ Environment files verified"
          EOF

      # 4. PRE-DEPLOYMENT: Database Backup (after pulling new code)
      - name: Backup Database
        run: |
          ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_IP }} << 'EOF'
            set -e
            echo "üìÅ Creating database backup before deployment..."
            
            cd /root/zippify
            
            # Create backup using the existing backup script (now with updated package.json)
            npm run backup-db
            
            # Also create a pre-deployment backup with timestamp  
            BACKUP_TIMESTAMP=$(date +%Y%m%d_%H%M%S)
            mkdir -p backups
            cp -f backend/db/zippify.db "backups/pre_deploy_backup_${BACKUP_TIMESTAMP}.db" || true
            
            echo "‚úÖ Database backup completed"
          EOF

      # 5. DEPLOYMENT: Build Frontend
      - name: Deploy and Build Frontend
        run: |
          ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_IP }} << 'EOF'
            set -e

            DEPLOY_LOG="/root/zippify/deploy_$(date +%Y%m%d_%H%M%S).log"
            exec > >(tee -a "$DEPLOY_LOG") 2>&1

            echo "üìù Logging deployment to: $DEPLOY_LOG"
            echo "‚è±Ô∏è Deployment started at $(date)"

            cd /root/zippify

            echo "üì¶ Installing frontend dependencies"
            npm install

            echo "üèóÔ∏è Building frontend"
            npm run build

            echo "üßπ Cleaning /var/www/zippify and forcing cache refresh"
            mkdir -p /var/www/zippify
            rm -rf /var/www/zippify/*

            echo "üìÅ Copying files from dist to production"
            cd /root/zippify
            cp -rv dist/* /var/www/listify/

            echo "üîÑ Adding cache-busting headers to nginx"
            # Add current timestamp to help with cache busting
            echo "<!-- Deployed: $(date) -->" >> /var/www/listify/index.html

            echo "‚úÖ Frontend deployment completed with cache-busting"
          EOF

      # 6. BACKEND: Install dependencies
      - name: Install Backend Dependencies
        run: |
          ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_IP }} << 'EOF'
            set -e
            echo "üì¶ Installing backend dependencies"
            cd /root/zippify/backend
            npm install
            echo "‚úÖ Backend dependencies installed"
          EOF

      # 7. BACKEND: Graceful shutdown
      - name: Stop Backend Service Gracefully
        run: |
          ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_IP }} << 'EOF'
            set -e
            echo "üõë Stopping backend service gracefully"
            
            # Try graceful PM2 stop first
            pm2 stop zippify-backend || echo "‚ö†Ô∏è PM2 process not running"
            
            # Wait a bit for graceful shutdown
            sleep 2
            
            # Force kill if still running
            PORT_PID=$(lsof -t -i:3001 || echo "")
            if [ ! -z "$PORT_PID" ]; then
              echo "üî® Force killing process on port 3001"
              kill -9 $PORT_PID || true
            fi
            
            # Clean up PM2 process
            pm2 delete zippify-backend || true
            
            echo "‚úÖ Backend stopped"
          EOF

      # 8. DATABASE: Run migrations if needed
      - name: Run Database Migrations
        run: |
          ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_IP }} << 'EOF'
            set -e
            echo "üîÑ Checking for database migrations"
            
            cd /root/zippify/backend
            
            # Check if there are any migration scripts
            if [ -d "migrations" ] && [ "$(ls -A migrations)" ]; then
              echo "üìã Running database migrations"
              NODE_ENV=production node migrations/runMigrations.js || echo "‚ö†Ô∏è Migration script not found or failed"
            else
              echo "‚ÑπÔ∏è No migrations to run"
            fi
            
            echo "‚úÖ Database migration check completed"
          EOF

      # 9. BACKEND: Start new service
      - name: Start New Backend Service
        run: |
          ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_IP }} << 'EOF'
            set -e
            echo "üöÄ Starting new backend service"
            
            cd /root/zippify/backend
            
            # Start with production environment
            NODE_ENV=production pm2 start server.js --name zippify-backend --update-env
            
            echo "‚úÖ Backend service started"
          EOF

      # 10. NGINX: Restart web server
      - name: Restart Nginx
        run: |
          ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_IP }} << 'EOF'
            set -e
            echo "üîÅ Restarting Nginx"
            systemctl restart nginx
            echo "‚úÖ Nginx restarted"
          EOF

      # 11. HEALTH CHECKS: Verify deployment
      - name: Comprehensive Health Check
        run: |
          ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_IP }} << 'EOF'
            set -e
            echo "üè• Starting comprehensive health checks"
            
            # Wait for services to stabilize
            echo "‚è≥ Waiting 10 seconds for services to stabilize..."
            sleep 10
            
            # Check PM2 status
            echo "üìä PM2 Status:"
            pm2 status zippify-backend
            
            # Check backend health endpoint with more tolerant checks
            echo "üîç Testing backend health endpoint at localhost:3001/api/health"
            HEALTH_CHECK_PASSED=false
            
            for i in {1..15}; do
              echo "üîç Health check attempt $i/15..."
              
              # Try different approaches to test the endpoint
              if curl -s --connect-timeout 5 --max-time 10 http://localhost:3001/api/health > /tmp/health_response.json 2>/dev/null; then
                echo "‚úÖ Got response from health endpoint"
                cat /tmp/health_response.json
                
                # Check if response contains OK or status
                if grep -q -E "(OK|status|running)" /tmp/health_response.json; then
                  echo "‚úÖ Backend health check passed (attempt $i)"
                  HEALTH_CHECK_PASSED=true
                  break
                else
                  echo "‚ö†Ô∏è Health endpoint responded but content unexpected"
                fi
              else
                echo "‚è≥ Backend not responding yet (attempt $i/15), waiting 5 seconds..."
                
                # Show backend logs for debugging
                if [ $i -eq 5 ] || [ $i -eq 10 ]; then
                  echo "üîç Backend logs (last 10 lines):"
                  pm2 logs zippify-backend --lines 10 || true
                fi
                
                sleep 5
              fi
            done
            
            if [ "$HEALTH_CHECK_PASSED" = false ]; then
              echo "‚ùå Backend health check failed after 15 attempts"
              echo "üîç Final backend logs:"
              pm2 logs zippify-backend --lines 30 || true
              echo "üîç PM2 process details:"
              pm2 show zippify-backend || true
              echo "üîç Process status:"
              ps aux | grep node || true
              echo "üîç Port 3001 status:"
              netstat -tulpn | grep 3001 || true
              exit 1
            fi
            
            # Test frontend proxy (less critical)
            echo "üîç Testing frontend proxy"
            if curl -s --connect-timeout 3 --max-time 8 http://localhost/api/health > /dev/null 2>&1; then
              echo "‚úÖ Frontend proxy to backend working"
            else
              echo "‚ö†Ô∏è Frontend proxy might have issues (non-critical)"
            fi
            
            # Database connectivity check
            echo "üóÑÔ∏è Testing database connectivity"
            cd /root/zippify/backend
            if timeout 10 node -e "
              const sqlite3 = require('sqlite3');
              const db = new sqlite3.Database('./db/zippify.db', (err) => {
                if (err) {
                  console.error('‚ùå Database connection failed:', err.message);
                  process.exit(1);
                } else {
                  console.log('‚úÖ Database connection successful');
                  db.close();
                  process.exit(0);
                }
              });
            " 2>/dev/null; then
              echo "‚úÖ Database is accessible"
            else
              echo "‚ö†Ô∏è Database connection test failed (but not critical for deployment)"
            fi
            
            echo "üéâ Health checks completed! Deployment successful!"
          EOF

      # 12. POST-DEPLOYMENT: Cleanup and notifications
      - name: Post-Deployment Cleanup
        run: |
          ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_IP }} << 'EOF'
            echo "üßπ Post-deployment cleanup"
            
            # Clean old PM2 logs
            pm2 flush
            
            # Clean old node_modules cache if needed
            # npm cache clean --force
            
            # Log deployment success
            echo "üìù Deployment completed at $(date)" >> /root/zippify/deployment.log
            
            echo "‚úÖ Cleanup completed"
          EOF

      # 13. MONITORING: Show final status
      - name: Show Final Status
        run: |
          ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_IP }} << 'EOF'
            echo ""
            echo "üéØ DEPLOYMENT SUMMARY"
            echo "===================="
            echo "‚è∞ Completed at: $(date)"
            echo ""
            
            echo "üìä Service Status:"
            timeout 10 pm2 status || echo "‚ö†Ô∏è PM2 status check timed out"
            echo ""
            
            echo "üîó Application URLs:"
            PUBLIC_IP=$(curl -s --max-time 3 ifconfig.me || echo "${{ secrets.SERVER_IP }}")
            echo "   Frontend: http://$PUBLIC_IP"
            echo "   Backend Health: http://$PUBLIC_IP/api/health"
            echo ""
            
            echo "üîç Quick Health Check:"
            if timeout 5 curl -s http://localhost:3001/api/health >/dev/null 2>&1; then
              echo "   ‚úÖ Backend responding"
            else
              echo "   ‚ö†Ô∏è Backend might need a moment to warm up"
            fi
            
            echo ""
            echo "üìà Recent Logs (last 3 lines):"
            timeout 5 pm2 logs zippify-backend --lines 3 2>/dev/null || echo "   ‚ÑπÔ∏è Logs not available right now"
            
            echo ""
            echo "üéâ Deployment completed successfully!"
            echo "‚úÖ Your application should be accessible at: http://$PUBLIC_IP"
          EOF